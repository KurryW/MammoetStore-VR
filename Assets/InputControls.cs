//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""SPMT"",
            ""id"": ""1694816d-a7f5-456b-b95e-d7a5426714fe"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7edab981-13e7-4f12-a364-fe701a997a9d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""01aad980-d39e-4b08-a31a-1854ffac0381"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""21ecf25e-69b0-4ddb-8b80-5d157b93f507"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ee3c2be-bea5-4076-89fa-3348528f794a"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""88827239-290f-49b1-ae97-405bd622c17e"",
            ""actions"": [
                {
                    ""name"": ""ShowButtons"",
                    ""type"": ""Button"",
                    ""id"": ""02d3f0ff-d438-45d2-947c-864898d5fe30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b31a17e1-8d14-4e93-9477-5bf4e992d0d4"",
                    ""path"": ""<ViveFocus3Controller>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowButtons"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Crane"",
            ""id"": ""063cbb28-360b-49a2-aa1c-c8a05b21e13e"",
            ""actions"": [
                {
                    ""name"": ""Hoist"",
                    ""type"": ""Value"",
                    ""id"": ""1128574c-673b-4359-8171-6ecad1381346"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Slew"",
                    ""type"": ""Value"",
                    ""id"": ""cb2cb998-9e24-4137-ada8-2f17c159fa73"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""ee9ff6b4-f13b-422e-b965-c6af45a90ca8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HookRotate"",
                    ""type"": ""Value"",
                    ""id"": ""f5fe29c3-79cf-4081-98aa-d0224d6cbf21"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6c432d41-4b10-473c-a6fc-d219a6cb326b"",
                    ""path"": ""<XRInputV1::HTC::HTCViveFocus3ControllerOpenXR>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slew"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d555f469-3d4c-4f1a-945c-8f12ab414c6a"",
                    ""path"": ""<XRInputV1::HTC::HTCViveCosmosControllerOpenXR>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slew"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Focus3"",
                    ""id"": ""dada101e-33d0-4567-8998-0128149fbbe6"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""67a2980d-d6e6-406f-9475-23211998a2e9"",
                    ""path"": ""<ViveFocus3Controller>/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""5ded5a78-fead-4b98-bb00-2fbf23af34ea"",
                    ""path"": ""<ViveFocus3Controller>/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Cosmos"",
                    ""id"": ""dc854545-a889-46f3-a8ac-98139c35b2d8"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""5bc283ed-4e51-444b-afe5-76b0c7eebb84"",
                    ""path"": ""<ViveCosmosController>/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""1e483fbc-417e-4bb7-8d2d-87c036984c16"",
                    ""path"": ""<ViveCosmosController>/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d0844eea-a84a-4485-88cf-fbff63e5affa"",
                    ""path"": ""<XRInputV1::HTC::HTCViveFocus3ControllerOpenXR>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hoist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae60bdf0-8cc2-4490-9ba1-566f21b3cc8a"",
                    ""path"": ""<XRInputV1::HTC::HTCViveCosmosControllerOpenXR>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hoist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0b874350-d1a7-4861-8654-ce6017390b06"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HookRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a7dea127-9e65-4c82-810c-03c1be9f3d32"",
                    ""path"": ""<ViveCosmosController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HookRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f0948a1a-8e32-4868-b617-77b719ac47e6"",
                    ""path"": ""<ViveCosmosController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HookRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SPMT
        m_SPMT = asset.FindActionMap("SPMT", throwIfNotFound: true);
        m_SPMT_Move = m_SPMT.FindAction("Move", throwIfNotFound: true);
        m_SPMT_Rotate = m_SPMT.FindAction("Rotate", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_ShowButtons = m_UI.FindAction("ShowButtons", throwIfNotFound: true);
        // Crane
        m_Crane = asset.FindActionMap("Crane", throwIfNotFound: true);
        m_Crane_Hoist = m_Crane.FindAction("Hoist", throwIfNotFound: true);
        m_Crane_Slew = m_Crane.FindAction("Slew", throwIfNotFound: true);
        m_Crane_Reset = m_Crane.FindAction("Reset", throwIfNotFound: true);
        m_Crane_HookRotate = m_Crane.FindAction("HookRotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SPMT
    private readonly InputActionMap m_SPMT;
    private List<ISPMTActions> m_SPMTActionsCallbackInterfaces = new List<ISPMTActions>();
    private readonly InputAction m_SPMT_Move;
    private readonly InputAction m_SPMT_Rotate;
    public struct SPMTActions
    {
        private @InputControls m_Wrapper;
        public SPMTActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_SPMT_Move;
        public InputAction @Rotate => m_Wrapper.m_SPMT_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_SPMT; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SPMTActions set) { return set.Get(); }
        public void AddCallbacks(ISPMTActions instance)
        {
            if (instance == null || m_Wrapper.m_SPMTActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SPMTActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
        }

        private void UnregisterCallbacks(ISPMTActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
        }

        public void RemoveCallbacks(ISPMTActions instance)
        {
            if (m_Wrapper.m_SPMTActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISPMTActions instance)
        {
            foreach (var item in m_Wrapper.m_SPMTActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SPMTActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SPMTActions @SPMT => new SPMTActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_ShowButtons;
    public struct UIActions
    {
        private @InputControls m_Wrapper;
        public UIActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShowButtons => m_Wrapper.m_UI_ShowButtons;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @ShowButtons.started += instance.OnShowButtons;
            @ShowButtons.performed += instance.OnShowButtons;
            @ShowButtons.canceled += instance.OnShowButtons;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @ShowButtons.started -= instance.OnShowButtons;
            @ShowButtons.performed -= instance.OnShowButtons;
            @ShowButtons.canceled -= instance.OnShowButtons;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // Crane
    private readonly InputActionMap m_Crane;
    private List<ICraneActions> m_CraneActionsCallbackInterfaces = new List<ICraneActions>();
    private readonly InputAction m_Crane_Hoist;
    private readonly InputAction m_Crane_Slew;
    private readonly InputAction m_Crane_Reset;
    private readonly InputAction m_Crane_HookRotate;
    public struct CraneActions
    {
        private @InputControls m_Wrapper;
        public CraneActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Hoist => m_Wrapper.m_Crane_Hoist;
        public InputAction @Slew => m_Wrapper.m_Crane_Slew;
        public InputAction @Reset => m_Wrapper.m_Crane_Reset;
        public InputAction @HookRotate => m_Wrapper.m_Crane_HookRotate;
        public InputActionMap Get() { return m_Wrapper.m_Crane; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CraneActions set) { return set.Get(); }
        public void AddCallbacks(ICraneActions instance)
        {
            if (instance == null || m_Wrapper.m_CraneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CraneActionsCallbackInterfaces.Add(instance);
            @Hoist.started += instance.OnHoist;
            @Hoist.performed += instance.OnHoist;
            @Hoist.canceled += instance.OnHoist;
            @Slew.started += instance.OnSlew;
            @Slew.performed += instance.OnSlew;
            @Slew.canceled += instance.OnSlew;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
            @HookRotate.started += instance.OnHookRotate;
            @HookRotate.performed += instance.OnHookRotate;
            @HookRotate.canceled += instance.OnHookRotate;
        }

        private void UnregisterCallbacks(ICraneActions instance)
        {
            @Hoist.started -= instance.OnHoist;
            @Hoist.performed -= instance.OnHoist;
            @Hoist.canceled -= instance.OnHoist;
            @Slew.started -= instance.OnSlew;
            @Slew.performed -= instance.OnSlew;
            @Slew.canceled -= instance.OnSlew;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
            @HookRotate.started -= instance.OnHookRotate;
            @HookRotate.performed -= instance.OnHookRotate;
            @HookRotate.canceled -= instance.OnHookRotate;
        }

        public void RemoveCallbacks(ICraneActions instance)
        {
            if (m_Wrapper.m_CraneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICraneActions instance)
        {
            foreach (var item in m_Wrapper.m_CraneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CraneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CraneActions @Crane => new CraneActions(this);
    public interface ISPMTActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnShowButtons(InputAction.CallbackContext context);
    }
    public interface ICraneActions
    {
        void OnHoist(InputAction.CallbackContext context);
        void OnSlew(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnHookRotate(InputAction.CallbackContext context);
    }
}
