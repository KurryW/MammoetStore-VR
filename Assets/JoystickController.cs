//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/JoystickController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @JoystickController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @JoystickController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""JoystickController"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""c222bfe8-21c2-4e7c-989e-f101e61b1b63"",
            ""actions"": [
                {
                    ""name"": ""Rotate PTC"",
                    ""type"": ""Value"",
                    ""id"": ""1b781cbd-a985-4747-a493-bc7ca19941dc"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Hook"",
                    ""type"": ""Value"",
                    ""id"": ""f1446b61-4538-4454-be93-8c18100ec9a2"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Crane Up and down"",
                    ""type"": ""Value"",
                    ""id"": ""2f0629b9-dc62-4bb1-8efa-bcf5c2cfc276"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""90b37bb9-d91d-4268-987d-4a5aa843e7d7"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate PTC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6b3ae0a-ec18-42db-9761-1c8efa1fd92b"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate PTC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa525215-5e8c-4df7-8b2a-9172edaafbda"",
                    ""path"": ""<Joystick>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Hook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d35c2bb0-2ceb-4ca9-848e-1a8415086f06"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crane Up and down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f66e859d-83d0-4a43-9ea7-e61a6a4c6d4c"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crane Up and down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_RotatePTC = m_Gameplay.FindAction("Rotate PTC", throwIfNotFound: true);
        m_Gameplay_RotateHook = m_Gameplay.FindAction("Rotate Hook", throwIfNotFound: true);
        m_Gameplay_CraneUpanddown = m_Gameplay.FindAction("Crane Up and down", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_RotatePTC;
    private readonly InputAction m_Gameplay_RotateHook;
    private readonly InputAction m_Gameplay_CraneUpanddown;
    public struct GameplayActions
    {
        private @JoystickController m_Wrapper;
        public GameplayActions(@JoystickController wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotatePTC => m_Wrapper.m_Gameplay_RotatePTC;
        public InputAction @RotateHook => m_Wrapper.m_Gameplay_RotateHook;
        public InputAction @CraneUpanddown => m_Wrapper.m_Gameplay_CraneUpanddown;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @RotatePTC.started += instance.OnRotatePTC;
            @RotatePTC.performed += instance.OnRotatePTC;
            @RotatePTC.canceled += instance.OnRotatePTC;
            @RotateHook.started += instance.OnRotateHook;
            @RotateHook.performed += instance.OnRotateHook;
            @RotateHook.canceled += instance.OnRotateHook;
            @CraneUpanddown.started += instance.OnCraneUpanddown;
            @CraneUpanddown.performed += instance.OnCraneUpanddown;
            @CraneUpanddown.canceled += instance.OnCraneUpanddown;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @RotatePTC.started -= instance.OnRotatePTC;
            @RotatePTC.performed -= instance.OnRotatePTC;
            @RotatePTC.canceled -= instance.OnRotatePTC;
            @RotateHook.started -= instance.OnRotateHook;
            @RotateHook.performed -= instance.OnRotateHook;
            @RotateHook.canceled -= instance.OnRotateHook;
            @CraneUpanddown.started -= instance.OnCraneUpanddown;
            @CraneUpanddown.performed -= instance.OnCraneUpanddown;
            @CraneUpanddown.canceled -= instance.OnCraneUpanddown;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnRotatePTC(InputAction.CallbackContext context);
        void OnRotateHook(InputAction.CallbackContext context);
        void OnCraneUpanddown(InputAction.CallbackContext context);
    }
}
