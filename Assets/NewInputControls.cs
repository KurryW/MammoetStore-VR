//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/NewInputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewInputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewInputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewInputControls"",
    ""maps"": [
        {
            ""name"": ""Crane"",
            ""id"": ""d9b4e01b-aa1b-4c03-88d1-e27efd7d0acf"",
            ""actions"": [
                {
                    ""name"": ""Slew"",
                    ""type"": ""Value"",
                    ""id"": ""0001480a-cef3-4413-a005-675471294e1a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Hoist"",
                    ""type"": ""Value"",
                    ""id"": ""04f20be1-981d-47e8-8433-1ab80b34452e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""07ebdbd6-f3a9-4973-9d10-2b60d8676662"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test"",
                    ""type"": ""Button"",
                    ""id"": ""c4a57bdc-cf03-44b2-8843-ca2dea1cc335"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c9389c9d-c2b0-47ea-90e2-7ebb8e487e97"",
                    ""path"": ""<XRInputV1::HTC::HTCViveFocus3ControllerOpenXR>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slew"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18501706-c5ad-4d3f-802d-a1c4a9e72537"",
                    ""path"": ""<XRInputV1::HTC::HTCViveFocus3ControllerOpenXR>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hoist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c786114a-9970-4b46-8997-73d5905f0bff"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""ae49d558-4368-45ad-85e8-8c1f8eb5a2ee"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""02e4101d-b18a-4d39-9a56-204344b5118e"",
                    ""path"": ""<ViveFocus3Controller>/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""e9769e6f-2fcc-42ca-b9f6-6bdf6db20842"",
                    ""path"": ""<ViveFocus3Controller>/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""10ee5e8a-9c26-4677-9388-240aea7230c4"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Crane
        m_Crane = asset.FindActionMap("Crane", throwIfNotFound: true);
        m_Crane_Slew = m_Crane.FindAction("Slew", throwIfNotFound: true);
        m_Crane_Hoist = m_Crane.FindAction("Hoist", throwIfNotFound: true);
        m_Crane_Reset = m_Crane.FindAction("Reset", throwIfNotFound: true);
        m_Crane_Test = m_Crane.FindAction("Test", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Crane
    private readonly InputActionMap m_Crane;
    private List<ICraneActions> m_CraneActionsCallbackInterfaces = new List<ICraneActions>();
    private readonly InputAction m_Crane_Slew;
    private readonly InputAction m_Crane_Hoist;
    private readonly InputAction m_Crane_Reset;
    private readonly InputAction m_Crane_Test;
    public struct CraneActions
    {
        private @NewInputControls m_Wrapper;
        public CraneActions(@NewInputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Slew => m_Wrapper.m_Crane_Slew;
        public InputAction @Hoist => m_Wrapper.m_Crane_Hoist;
        public InputAction @Reset => m_Wrapper.m_Crane_Reset;
        public InputAction @Test => m_Wrapper.m_Crane_Test;
        public InputActionMap Get() { return m_Wrapper.m_Crane; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CraneActions set) { return set.Get(); }
        public void AddCallbacks(ICraneActions instance)
        {
            if (instance == null || m_Wrapper.m_CraneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CraneActionsCallbackInterfaces.Add(instance);
            @Slew.started += instance.OnSlew;
            @Slew.performed += instance.OnSlew;
            @Slew.canceled += instance.OnSlew;
            @Hoist.started += instance.OnHoist;
            @Hoist.performed += instance.OnHoist;
            @Hoist.canceled += instance.OnHoist;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
            @Test.started += instance.OnTest;
            @Test.performed += instance.OnTest;
            @Test.canceled += instance.OnTest;
        }

        private void UnregisterCallbacks(ICraneActions instance)
        {
            @Slew.started -= instance.OnSlew;
            @Slew.performed -= instance.OnSlew;
            @Slew.canceled -= instance.OnSlew;
            @Hoist.started -= instance.OnHoist;
            @Hoist.performed -= instance.OnHoist;
            @Hoist.canceled -= instance.OnHoist;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
            @Test.started -= instance.OnTest;
            @Test.performed -= instance.OnTest;
            @Test.canceled -= instance.OnTest;
        }

        public void RemoveCallbacks(ICraneActions instance)
        {
            if (m_Wrapper.m_CraneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICraneActions instance)
        {
            foreach (var item in m_Wrapper.m_CraneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CraneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CraneActions @Crane => new CraneActions(this);
    public interface ICraneActions
    {
        void OnSlew(InputAction.CallbackContext context);
        void OnHoist(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnTest(InputAction.CallbackContext context);
    }
}
